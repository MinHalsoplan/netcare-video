<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600"
			   creationComplete="start()">
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import org.callistasoftware.netcare.video.VideoClientSupport;
			import org.callistasoftware.netcare.video.VideoConsumer;
			import org.callistasoftware.netcare.video.VideoEvent;
			import org.callistasoftware.netcare.video.VideoProducer;
			
			private var stream:VideoClientSupport;
			
			private var errs:Boolean;
			
			protected function start():void {
				
				trace("Application start");
				
				var serverUrl:String = this.parameters["server"];
				var streamName:String = this.parameters["stream"];
				var type:String = this.parameters["type"];
				var width:uint = this.parameters["width"];
				var height:uint = this.parameters["height"];
				
				errs = false;
				if (serverUrl == null || serverUrl.length == 0) {
					Alert.show("No server url set.");
					errs = true;
				}
				
				if (streamName == null || streamName.length == 0) {
					Alert.show("The stream to consume is not set.");
					errs = true;
				}
				
				if (type == null || type.length == 0) {
					Alert.show("Type is not set. Must be either 'consumer' or 'producer'");
					errs = true;
				}
				
				if (errs) {
					Alert.show("The execution will not continue due to initialization failure.");
				}
				
				if (type == 'consumer') {
					stream = new VideoConsumer(serverUrl, streamName, width, height);
					stream.addEventListener(org.callistasoftware.netcare.video.VideoEvent.CONSUMER_AVAILABLE, onVideo);
					stream.addEventListener(org.callistasoftware.netcare.video.VideoEvent.CONSUMER_UNAVAILABLE, onNoVideo);
				} else if (type == 'producer') {
					stream = new VideoProducer(serverUrl, streamName, width, height);
					stream.addEventListener(org.callistasoftware.netcare.video.VideoEvent.PRODUCER_AVAILABLE, onVideo);
					stream.addEventListener(org.callistasoftware.netcare.video.VideoEvent.PRODUCER_UNAVAILABLE, onNoVideo);
				}
				
				this.stream.connect();
			}
			
			protected function onVideo(event:org.callistasoftware.netcare.video.VideoEvent):void {
				video.addChild(event.getVideo());
			}
			
			protected function onNoVideo(event:org.callistasoftware.netcare.video.VideoEvent):void {
				video.removeChildAt(0);
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		
	</fx:Declarations>
	<s:VideoDisplay x="0" y="0" id="video" />	
</s:Application>
